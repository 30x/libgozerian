package main

import (
  "net/http"
  "unsafe"
)

import "C"

/*
 * The final purpose of this whole module is to call this function.
 */
type RequestHandler interface {
  HandleRequest(resp http.ResponseWriter, req *http.Request, proxyReq *ProxyRequest)
}

/*
 * This is the actual C language interface to weaver. It is basically
 * a small C wrapper to the "manager."
 */

// Functions below are the public C-language API for this code.

/*
 * Create a new "request" object and return its unique ID. The request
 * goes in a map, so it's important that the caller always call
 * GoFreeRequest or there will be a memory leak.
 */
//export GoCreateRequest
func GoCreateRequest() uint32 {
  return CreateRequest()
}

/*
 * Clean up any storage used by the request. This method must be called for
 * every ID generated by GoCreateRequest or there will be a memory leak.
 */
//export GoFreeRequest
func GoFreeRequest(id uint32) {
  FreeRequest(id)
}

/*
 * Start parsing the new request. "rawHeaders" must be a string that
 * represents the HTTP request line and headers, separated by CRLF pairs,
 * exactly as described in the HTTP spec.
 * Once this function has been called, the request is already running.
 * The caller MUST periodically call "GoPollRequest" in order to get updates
 * on the status of the request, and MUST call "GoFreeRequest" after
 * the request is done.
 */
//export GoBeginRequest
func GoBeginRequest(id uint32, rawHeaders *C.char) {
  BeginRequest(id, C.GoString(rawHeaders))
}

/*
 * Poll for updates from the running request. Each update is returned as
 * a null-terminated string. The format of each command string is
 * described in the README.
 * If "block" is non-zero, then block until a command is present. Otherwise,
 * return immediately if there is no command on the queue.
 * The final response from the request will be "DONE." When this is called,
 * then no more commands will be returned. The caller must not poll
 * after "DONE" is returned.
 * The caller is responsible for calling "free" on the returned command.
 */
//export GoPollRequest
func GoPollRequest(id uint32, block int32) *C.char {
  cmd := PollRequest(id, block != 0)
  if cmd == "" {
    return nil
  }
  return C.CString(cmd)
}

/*
 * Send a chunk of request data to the running goroutine. The chunk is a
 * byte array (which may include NULL bytes) of "chunkLen" bytes.
 * If "last" is non-zero, then this represents the last chunk.
 * This method MUST not be called unless an "RBOD" command has been received,
 * and if so then the caller must eventually call it with "last" set to
 * non-zero.
 */
//export GoSendRequestBodyChunk
func GoSendRequestBodyChunk(id uint32, last int32, c *C.char, chunkLen uint32) {
  chunk := make([]byte, chunkLen)
  copy(chunk[:], (*[1<<30]byte)(unsafe.Pointer(c))[:])
  SendRequestBodyChunk(id, chunk)
}

/*
 * This is a convenience function used to install a test handler that responds
 * to a particular set of API calls.
 */
//export GoInstallTestHandler
func GoInstallTestHandler() {
  SetTestRequestHandler()
}

func main() {
  panic("This is a library. No main.");
}
